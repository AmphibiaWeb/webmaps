<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css">
        <link rel="stylesheet" href="css/qgis2web.css"><link rel="stylesheet" href="css/fontawesome-all.min.css">
        <style>
        #map {
            width: 1387px;
            height: 1133px;
        }
        </style>
        <title></title>
    </head>
    <body>
        <div id="map">
        </div>
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="data/Color_1.js"></script>
        <script src="data/dbwake_2_16_2.js"></script>
        <script>
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString') {
              highlightLayer.setStyle({
                color: '#ffff00',
              });
            } else {
              highlightLayer.setStyle({
                fillColor: '#ffff00',
                fillOpacity: 1
              });
            }
        }
        var map = L.map('map', {
            scrollWheelZoom:true,
            zoomControl: true
        }).setView([35,-100],5);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
        var bounds_group = new L.featureGroup([]);
        map.createPane('pane_EsriLightGray_0');
        map.getPane('pane_EsriLightGray_0').style.zIndex = 400;
        var layer_EsriLightGray_0 = L.tileLayer('http://server.arcgisonline.com/arcgis/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}', {
            pane: 'pane_EsriLightGray_0',
            opacity: 1.0,
            attribution: '',
            minZoom: 1,
            maxZoom: 28,
            minNativeZoom: 0,
            maxNativeZoom: 22
            
        });
        layer_EsriLightGray_0;
        map.addLayer(layer_EsriLightGray_0);
        function pop_Color_1(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                },
                mouseover: highlightFeature,
            });
        }

        function style_Color_1_0() {
            return {
                pane: 'pane_Color_1',
                opacity: 1,
                color: 'rgb(135,206,250)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgb(135,206,250)',
                interactive: false,
            }
        }
        map.createPane('pane_Color_1');
        map.getPane('pane_Color_1').style.zIndex = 401;
        map.getPane('pane_Color_1').style['mix-blend-mode'] = 'color-burn';
        var layer_Color_1 = new L.geoJson(json_Color_1, {
            attribution: '',
            interactive: false,
            dataVar: 'json_Color_1',
            layerName: 'layer_Color_1',
            pane: 'pane_Color_1',
            onEachFeature: pop_Color_1,
            style: style_Color_1_0,
        });
        bounds_group.addLayer(layer_Color_1);
        map.addLayer(layer_Color_1);
        function pop_dbwake_2_16_2(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (i in e.target._eventParents) {
                        e.target._eventParents[i].resetStyle(e.target);
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['binomial'] !== null ? autolinker.link(feature.properties['binomial'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Colloquial'] !== null ? autolinker.link(feature.properties['Colloquial'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['photo'] !== null ? autolinker.link(feature.properties['photo'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['reference'] !== null ? autolinker.link(feature.properties['reference'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['blurb'] !== null ? autolinker.link(feature.properties['blurb'].toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['aweblink'] !== null ? autolinker.link(feature.properties['aweblink'].toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            layer.bindPopup(popupContent, {maxHeight: 400});
        }

        function style_dbwake_2_16_2_0() {
            return {
                pane: 'pane_dbwake_2_16_2',
                stroke: false, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgb(255,69,0, 0.55)',
                interactive: true,
            }
        }
        map.createPane('pane_dbwake_2_16_2');
        map.getPane('pane_dbwake_2_16_2').style.zIndex = 402;
        map.getPane('pane_dbwake_2_16_2').style['mix-blend-mode'] = '';
        var layer_dbwake_2_16_2 = new L.geoJson(json_dbwake_2_16_2, {
            attribution: '',
            interactive: true,
            dataVar: 'json_dbwake_2_16_2',
            layerName: 'layer_dbwake_2_16_2',
            pane: 'pane_dbwake_2_16_2',
            onEachFeature: pop_dbwake_2_16_2,
            style: style_dbwake_2_16_2_0,
        });
        bounds_group.addLayer(layer_dbwake_2_16_2);
        map.addLayer(layer_dbwake_2_16_2);
        var baseMaps = {};
        L.control.layers(baseMaps,{'<img src="legend/dbwake_2_16_2.png" /> dbwake_2_16': layer_dbwake_2_16_2,'<img src="legend/Color_1.png" /> Color': layer_Color_1,"Esri Light Gray": layer_EsriLightGray_0,}).addTo(map);
        setBounds();

       
        var southWest = L.latLng(30.404184, -120.295844),
            northEast = L.latLng(90,-100);
            bounds = L.latLngBounds(southWest, northEast);



        map.setMaxBounds(bounds);
        map.on('drag', function() {
	    map.panInsideBounds(bounds, { animate: true });
});


var map = L.map('map', {
    maxZoom: 20,
    minZoom: 6,
    zoomControl: false
});


        </script>
    </body>
</html>
